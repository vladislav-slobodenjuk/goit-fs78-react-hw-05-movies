{"version":3,"file":"static/js/394.f4301e26.chunk.js","mappings":"gSAGaA,EAAOC,EAAAA,GAAAA,KAAH,sJAQJC,EAAQD,EAAAA,GAAAA,MAAH,+FAMLE,GAAOF,EAAAA,EAAAA,IAAOG,EAAAA,IAAPH,CAAH,+F,SCfJI,EAAY,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAS1B,OACE,UAACN,EAAD,CAAMO,SATa,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAQF,EAAEG,OAAOC,SAASC,YAAYC,MAAMC,OAClDT,EAAeI,GACfF,EAAEG,OAAOK,OACV,EAGC,WACE,SAACb,EAAD,KACA,SAACD,EAAD,CAAOe,KAAK,cAAcC,KAAK,WAGpC,E,SCoBD,EA9Be,WACb,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMd,EAAQa,EAAaE,IAAI,SAgB/B,OATAC,EAAAA,EAAAA,YAAU,WACHhB,IAEL,iBAAC,qGACwBiB,EAAAA,EAAAA,IAAcjB,GADtC,OACOkB,EADP,OAECP,EAAUO,GAFX,0CAAD,EAID,GAAE,CAAClB,KAGF,6BACE,wBAAI,mBACJ,SAACL,EAAD,CAAWC,eAjBK,SAAAI,GAClB,GAAc,KAAVA,EAAc,OAAOmB,QAAQC,IAAI,eACrCN,EAAgB,CAAEd,MAAAA,GACnB,IAeIU,EAAOW,OAAS,IAAK,SAACC,EAAA,EAAD,CAAUZ,OAAQA,IACvCV,GAA2B,IAAlBU,EAAOW,SAAgB,uBAAG,mBAGzC,C,mGCjCYE,EAAYhC,EAAAA,GAAAA,IAAH,0SAiBTiC,EAAcjC,EAAAA,GAAAA,IAAH,qRAkBXkC,EAAYlC,EAAAA,GAAAA,GAAH,wH,SCjCT+B,EAAW,SAAC,GAAgB,IAAdZ,EAAa,EAAbA,OACnBgB,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACJ,EAAD,UACGb,EAAOkB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACV,SAACP,EAAD,WACE,UAAC,KAAD,CAAMQ,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA1C,WACE,gBACES,IAAG,0CAAqCJ,GACxCK,IAAKN,KAEP,SAACL,EAAD,UAAYK,QANED,EADR,KAajB,C,sIChBKQ,E,OAAcC,EAAAA,OAAa,CAC/BC,QALe,+BAMfC,QAAS,CACPC,OAAQ,mBACRC,cAAc,UAAD,OANf,0NAUK,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBN,EAAYtB,IAAI,sBADlC,uBACG6B,EADH,EACGA,KADH,kBAEEA,EAAKC,SAFP,kEAKA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA0BjB,EAAIkB,GAA9B,kFACCC,EAAMD,EAAK,gBAAYlB,EAAZ,YAAkBkB,GAAlB,gBAAqClB,GADjD,SAEkBQ,EAAYtB,IAAIiC,GAFlC,uBAEGJ,EAFH,EAEGA,KAFH,kBAGEA,GAHF,kEAMA,SAAe3B,EAAtB,+CAAO,OAAP,oBAAO,WAA6BjB,GAA7B,yFACkBqC,EAAYtB,IAAI,eAAgB,CAAEkC,OAAQ,CAAEjD,MAAAA,KAD9D,uBACG4C,EADH,EACGA,KADH,kBAEEA,EAAKC,SAFP,kE","sources":["components/SearchBox/SearchBox.styled.js","components/SearchBox/SearchBox.jsx","Pages/Movies.jsx","components/FilmList/FilmList.styled.js","components/FilmList/FilmList.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { HiSearch } from 'react-icons/hi';\n\nexport const Form = styled.form`\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  margin-bottom: 16px;\n  text-transform: uppercase;\n`;\n\nexport const Input = styled.input`\n  padding: 8px 32px 8px 8px;\n  border-radius: 4px;\n  font: inherit;\n`;\n\nexport const Icon = styled(HiSearch)`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  right: 6px;\n`;\n","import { Form, Input, Icon } from './SearchBox.styled';\n\nexport const SearchBox = ({ onHandleSubmit }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const query = e.target.elements.searchInput.value.trim();\n    onHandleSubmit(query);\n    e.target.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Icon />\n      <Input name=\"searchInput\" type=\"text\" />\n    </Form>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { FilmList } from 'components/FilmList/FilmList';\nimport { SearchBox } from 'components/SearchBox/SearchBox';\nimport { searchByQuery } from 'services/api';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query');\n\n  const updateQuery = query => {\n    if (query === '') return console.log('empty query');\n    setSearchParams({ query });\n  };\n\n  useEffect(() => {\n    if (!query) return;\n\n    (async () => {\n      const response = await searchByQuery(query);\n      setMovies(response);\n    })();\n  }, [query]);\n\n  return (\n    <main>\n      <h1>Movies Search</h1>\n      <SearchBox onHandleSubmit={updateQuery} />\n      {movies.length > 0 && <FilmList movies={movies} />}\n      {query && movies.length === 0 && <p>Nothig Found</p>}\n    </main>\n  );\n};\n\nexport default Movies;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(320px, 360px));\n  gap: 16px;\n\n  margin: 0 auto;\n  width: 320px;\n\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 1280px;\n  }\n`;\n\nexport const CardWrapper = styled.div`\n  display: flex;\n  /* align-items: center; */\n  justify-content: center;\n  border: 1px solid black;\n  border-radius: 4px;\n\n  transition: transform 0.3s;\n\n  &:hover {\n    transform: scale(1.03);\n  }\n\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const MovieName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  max-width: 342px;\n  color: black;\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { CardWrapper, Container, MovieName } from './FilmList.styled';\n\nexport const FilmList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <Container>\n      {movies.map(({ id, title, poster_path }) => (\n        <CardWrapper key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <img\n              src={`https://image.tmdb.org/t/p/w342/${poster_path}`}\n              alt={title}\n            />\n            <MovieName>{title}</MovieName>\n          </Link>\n        </CardWrapper>\n      ))}\n    </Container>\n  );\n};\n\nFilmList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst AUTHORIZATION_BEARER =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmODU0Y2RkODdhYTkwNTNjYTAwMjI5ZmVhNzNlNTkyNSIsInN1YiI6IjYxODZmYWFkZmU2MzE4MDA2NDgzZTdkZSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.vm-UaTyMPJ2HhXiSRvz-VpPqqqKEF-3PBdhfYlg5v3g';\n\nconst movieDBInst = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    accept: 'application/json',\n    Authorization: `Bearer ${AUTHORIZATION_BEARER}`,\n  },\n});\n\nexport async function getDayTrending() {\n  const { data } = await movieDBInst.get('trending/movie/day');\n  return data.results;\n}\n\nexport async function searchById(id, param) {\n  const url = param ? `movie/${id}/${param}` : `movie/${id}`;\n  const { data } = await movieDBInst.get(url);\n  return data;\n}\n\nexport async function searchByQuery(query) {\n  const { data } = await movieDBInst.get('search/movie', { params: { query } });\n  return data.results;\n}\n"],"names":["Form","styled","Input","Icon","HiSearch","SearchBox","onHandleSubmit","onSubmit","e","preventDefault","query","target","elements","searchInput","value","trim","reset","name","type","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","searchByQuery","response","console","log","length","FilmList","Container","CardWrapper","MovieName","location","useLocation","map","id","title","poster_path","to","state","from","src","alt","movieDBInst","axios","baseURL","headers","accept","Authorization","getDayTrending","data","results","searchById","param","url","params"],"sourceRoot":""}